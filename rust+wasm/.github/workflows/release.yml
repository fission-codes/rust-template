name: 𝌚 Release

on:
  workflow_dispatch:
    inputs:
      force-publish:
        required: true
        type: boolean
        description: Publish Releases at Anytime

  workflow_run:
    workflows: [ 🧪 Tests and Checks ]
    branches: [main]
    types: [ completed ]

concurrency:
  group: {{ "${{ github.workflow " }}}}-{{ "${{ github.ref " }}}}
  cancel-in-progress: true

jobs:
  release-please:
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/main' &&
      github.repository_owner == '{{github-name}}' &&
      github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'

    outputs:
      releases_created: {{ "${{ steps.release.outputs" }}['{{project-name}}--release_created'] || steps.release.outputs['{{project-name}}-wasm--release_created'] }}
      wasm_release_created: {{ "${{ steps.release.outputs" }}['{{project-name}}-wasm--release_created'] }}{% if auditable %}
      tag: {{ "${{ steps.release.outputs" }}['{{project-name}}--tag_name'] }}{% endif %}

    steps:
      - name: Run release-please
        id: release
        uses: google-github-actions/release-please-action@v3
        with:
          token: {{ "${{ secrets.GITHUB_TOKEN " }}}}
          default-branch: main
          command: manifest
          extra-files: |
            README.md

{% if auditable %}
  # Build auditable (https://github.com/rust-secure-code/cargo-auditable) binaries across os's/target's.
  build-and-release-auditable-bin:
    runs-on: {{ "${{ matrix.os " }}}}
    needs: [ release-please, publish-release-crates ]

    permissions:
      contents: write

    strategy:
      matrix:
        include:
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Install cargo tools
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-auditable

      - name: Install Cross-Compilation Tools
        uses: taiki-e/setup-cross-toolchain-action@v1
        with:
          target: {{ "${{ matrix.target " }}}}
        if: startsWith(matrix.os, 'ubuntu')  && !contains(matrix.target, '-musl')

      - name: Install cross for Musl
        uses: taiki-e/install-action@cross
        if: contains(matrix.target, '-musl')

      - name: Build Auditable Binary
        uses: actions-rs/cargo@v1
        with:
          command: auditable
          args: build --manifest-path {{project-name}}/Cargo.toml --release

      - name: Upload release binaries
        uses: taiki-e/upload-rust-binary-action@v1
        with:
          bin: {{project-name}}
          ref: refs/tags/{{ "${{ needs.release-please.outputs.tag " }}}}
          include: {% if license == "dual" %}LICENSE-MIT,LICENSE-APACHE,README.md{% else %}LICENSE,README.md{% endif %}
          archive: $bin-$tag-$target
          target: {{ "${{ matrix.target " }}}}
          token: {{ "${{ secrets.GITHUB_TOKEN " }}}}
        env:
          CARGO_PROFILE_RELEASE_LTO: true
          CARGO_PROFILE_RELEASE_CODEGEN_UNITS: 1
{% endif %}
  publish-release-crates:
    if: {{ "${{ needs.release-please.outputs.releases_created " }}|| github.event.inputs.force-publish }}

    runs-on: ubuntu-latest
    needs: [ release-please ]

    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Project
        uses: Swatinem/rust-cache@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable

      - name: Install Cargo Workspaces
        env:
          RUSTFLAGS: '-Copt-level=1'
        uses: actions-rs/cargo@v1
        with:
          args: --force cargo-workspaces
          command: install

      - name: Verify Publishing of crate
        uses: katyo/publish-crates@v1
        with:
          dry-run: true

      - name: Cargo Publish to crates.io
        env:
          CARGO_REGISTRY_TOKEN: {{ "${{ secrets.CARGO_REGISTRY_TOKEN " }}}}
        run: cargo workspaces publish --from-git

  publish-release-npm:
    if: {{ "${{ needs.release-please.outputs.wasm_release_created " }}|| github.event.inputs.force-publish }}

    runs-on: ubuntu-latest
    needs: [ release-please ]

    permissions:
      contents: write

    defaults:
      run:
        working-directory: ./{{project-name}}-wasm

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Cache Project
        uses: Swatinem/rust-cache@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          override: true
          profile: minimal
          toolchain: stable

      - name: Setup Node
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
          registry-url: 'https://registry.npmjs.org'

      - name: Install wasm-pack
        run: curl https://rustwasm.github.io/wasm-pack/installer/init.sh -sSf | sh

      # Builds output via wasm-pack and renames package.json name to remove
      # `-wasm`.
      - name: Build
        run: |
          wasm-pack build --target {{node-or-web}} --out-name {{project-name}}
          sed -i -e 's/"name": "{{project-name}}-wasm"/"name": "{{project-name}}",\n  "type": "module"/g' pkg/package.json

      - name: Publish to npm
        run: wasm-pack publish
        working-directory: pkg
        env:
          NODE_AUTH_TOKEN: {{ "${{ secrets.NPM_TOKEN " }}}}{% if docker %}
  push-docker-build:
    runs-on: ubuntu-latest
    needs: [ release-please, publish-release-crates ]

    env:
      DOCKER_BUILDKIT: 1

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Version Number
        shell: bash
        run: echo "PROJECT_VERSION=$(sed -n 's/^version = "\(.*\)"/\1/p' {{project-name}}/Cargo.toml | head -n1)" >> $GITHUB_ENV

      # https://github.com/docker/setup-qemu-action
      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      # https://github.com/docker/setup-buildx-action
      - name: Setup Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: "--debug"

      - name: Login to Dockerhub
        uses: docker/login-action@v2
        with:
          username: {{ "${{ secrets.DOCKERHUB_USERNAME " }}}}
          password: {{ "${{ secrets.DOCKERHUB_TOKEN " }}}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: {{ "${{ github.repository_owner " }}}}
          password: {{ "${{ secrets.GITHUB_TOKEN " }}}}

      - name: Docker Build and Push
        uses: docker/build-push-action@v3
        with:{% if dockerbuild == "glibc" %}
          build-args: |
            RUST_BUILD_IMG=rust:1.65-slim-bullseye
            DEBIAN_TAG=bullseye-slim{% else %}
          build-args: |
            RUST_BUILD_IMG=rust:1.65-slim-bullseye{% endif %}
          cache-from: type=registry,ref=ghcr.io/{{ "${{ github.repository_owner " }}}}/{{project-name}}:latest
          cache-to: type=registry,ref=ghcr.io/{{ "${{ github.repository_owner " }}}}/{{project-name}}:latest,mode=max
          file: docker/Dockerfile
          context: .{% if dockerbuild == "glibc" %}
          # We don't add `linux/arm64` here, as it can cause GitHub runners to
          # stall for too long.
          platforms: linux/amd64{% else %}
          platforms: linux/amd64, linux/arm64{% endif %}
          push: true
          tags: |
            {{ "${{ github.repository_owner " }}}}/{{project-name}}:{{ "${{ env.PROJECT_VERSION " }}}}
            {{ "${{ github.repository_owner " }}}}/{{project-name}}:latest
            ghcr.io/{{ "${{ github.repository_owner " }}}}/{{project-name}}:{{ "${{ env.PROJECT_VERSION " }}}}
            ghcr.io/{{ "${{ github.repository_owner " }}}}/{{project-name}}:latest{% endif %}
