[template]
cargo_generate_version = ">=0.16.0"
ignore = [
    ".git",
    "pre-script.rhai"
]

[hooks]
init = ["init-msg.rhai"]
pre = ["pre-script.rhai"]
post = ["final-script.rhai", "final-msg.rhai"]

[placeholders.github-name]
type = "string"
prompt = "Enter your GitHub username or org."
regex = "^[A-Za-z0-9][A-Za-z0-9-]{0,38}$"

[placeholders.github-codeowner]
type = "string"
prompt = "Who is the GitHub codeowner - GitHub user or org/team?"

[placeholders.github_actions]
type = "bool"
prompt = "Set up GitHub Actions CI?"
default = true

[placeholders.dependabot]
type = "bool"
prompt = "Enable Dependabot prs/checks?"
default = true

[placeholders.toolchain]
type = "string"
prompt = "Which rust toolchain version do you want?"
choices = ["stable", "beta", "nightly"]
default = "stable"

[placeholders.nix]
type = "bool"
prompt = "Set up a Nix flake?"
default = true

[placeholders.contributing]
type = "bool"
prompt = "Set up a Contributing guide?"
default = true

[placeholders.security_policy]
type = "bool"
prompt = "Set up a Security policy for the project?"
default = true

[placeholders.templates]
type = "bool"
prompt = "Set up a GitHub Issue and PR templates?"
default = true

[placeholders.bench]
type = "bool"
prompt = "Set up Rust benchmarking?"
default = false

[conditional.'within_cargo_project == false || is_init == false'.placeholders.license]
type = "string"
prompt = "What license to use?"
choices = ["Apache", "MIT", "dual"]
default = "dual"

[conditional.'within_cargo_project == true && is_init == true'.placeholders.license]
type = "string"
prompt = "What license to use?"
choices = ["Apache", "MIT", "dual", "use existing"]
default = "dual"

[conditional.'(github_actions == true && bench == true) || within_cargo_project == false || is_init == false || security_policy == true || readme == true'.placeholders.repo-name]
type = "string"
prompt = "Enter the name of the repository without username or org, which may be different from the project name."
regex = "^[A-Za-z0-9][A-Za-z0-9-]{0,100}$"

[conditional.'within_cargo_project == false || is_init == false'.placeholders.description]
type = "string"
prompt = "Enter a description of the project."
default = ""

[conditional.'within_cargo_project == true && is_init == true'.placeholders.coc]
type = "bool"
prompt = "Set up a Code of Conduct?"
default = true

[conditional.'within_cargo_project == true && is_init == true'.placeholders.readme]
type = "bool"
prompt = "Add a README.md?"
default = true

[conditional.'within_cargo_project == false || is_init == false || contributing == true || readme == true'.placeholders.have_discord]
type = "bool"
prompt = "Link a discord community?"
default = true

[conditional.'within_cargo_project == false || is_init == false || security_policy == true || contributing == true'.placeholders.github-email]
type = "string"
prompt = "What is the email associated w/ the username or org?"

[conditional.'crate_type == "bin"'.placeholders.axum]
type = "bool"
prompt = "Want to set up an axum webserver as your Rust binary application?"
default = true

[conditional.'crate_type == "bin" && axum == true'.placeholders.port]
type = "string"
prompt = "Which port do you want use to server the application/API?"
default = "3000"
regex = "^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$"

[conditional.'crate_type == "bin" && axum == true'.placeholders.metricsport]
type = "string"
prompt = "Which port do you want to serve metrics?"
default = "4000"
regex = "^((6553[0-5])|(655[0-2][0-9])|(65[0-4][0-9]{2})|(6[0-4][0-9]{3})|([1-5][0-9]{4})|([0-5]{0,5})|([0-9]{1,4}))$"

[conditional.'crate_type == "bin"'.placeholders.docker]
type = "bool"
prompt = "Want to set up Docker for the Rust binary?"
default = true

[conditional.'docker == true'.placeholders.dockerbuild]
type = "string"
prompt = "For docker, do you want a glibc or musl build?"
choices = ["glibc", "musl"]
default = "musl"

[conditional.'docker == false']
ignore = [
    "Dockerfile.musl",
    "Dockerfile.glibc",
    ".dockerignore",
    ".github/workflows/docker.yml"
]
[conditional.'crate_type == "bin" && github_actions == true'.placeholders.auditable]
type = "bool"
prompt = "Embed dependency information into a binary and publish the artifact?"
default = false

[conditional.'github_actions == true'.placeholders.codecov]
type = "bool"
prompt = "Enable codecov coverage upload via GitHub Actions?"
default = true

[conditional.'have_discord == true'.placeholders.discordlink]
type = "string"
prompt = "Enter a discord invite link?"

[conditional.'crate_type == "lib"']
ignore = [
    "src/main.rs",
    "Cargo.lock",
    "Dockerfile.musl",
    "Dockerfile.glibc",
    ".dockerignore",
    ".github/workflows/docker.yml"
]

[conditional.'crate_type == "bin"']
ignore = [
    "examples"
]

[conditional.'bench == false']
ignore = [
    "benches",
    "src/test_utils",
    ".github/workflows/bench.yml"
]

[conditional.'nix == false']
ignore = [
    ".envrc",
    "flake.nix"
]

[conditional.'contributing == false']
ignore = [
    "CONTRIBUTING.md"
]

[conditional.'security_policy == false']
ignore = [
    "SECURITY.md"
]

[conditional.'templates == false']
ignore = [
    ".github/ISSUE_TEMPLATE",
    ".github/PULL_REQUEST_TEMPLATE.md"
]

[conditional.'coc == false']
ignore = [
    "CODE_OF_CONDUCT.md"
]

[conditional.'github_actions == false']
ignore = [
    ".github/workflows",
    "release-please-config.json",
    ".release-please-manifest.json",
    "codecov.yml"
]

[conditional.'github_actions == false && nix == false']
ignore = [
    "deny.toml"
]

[conditional.'dependabot == false']
ignore = [
    ".github/dependabot.yml"
]

[conditional.'codecov == false']
ignore = [
    ".github/workflows/coverage.yml",
    "codecov.yml"
]

[conditional.'within_cargo_project == true']
ignore = [
    ".gitignore"
]

[conditional.'within_cargo_project == true && is_init == true']
ignore = [
    "Cargo.toml",
    "Cargo.axum.toml",
    "Cargo.lock",
    "src",
    "src.axum",
    "docs",
    "config",
    "tests/integration_test.rs",
    "tests/integration_test.axum.rs"
]

[conditional.'within_cargo_project == false || is_init == false']
ignore = [
    "tests/a_integration_test.rs"
]

[conditional.'within_cargo_project == true && is_init == true && readme == false']
ignore = [
    "README.md",
    "README.axum.md",
    "assets"
]

[conditional.'crate_type == "bin" && axum == true']
ignore = [
    "src",
    "tests/integration_test.rs",
    "Cargo.toml",
    "README.md"
]

[conditional.'crate_type == "lib" || axum == false']
ignore = [
    "src.axum",
    "tests/integration_test.axum.rs",
    "Cargo.axum.toml",
    "README.axum.md",
    "config",
    "docs"
]
